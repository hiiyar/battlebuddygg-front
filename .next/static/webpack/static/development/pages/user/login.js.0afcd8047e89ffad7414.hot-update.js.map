{"version":3,"file":"static/webpack/static/development/pages/user/login.js.0afcd8047e89ffad7414.hot-update.js","sources":["webpack:///./src/services/auth.ts"],"sourcesContent":["import * as rxjs from 'rxjs';\nimport { IUser }from '../interfaces/user';\nimport apiService, { ApiService } from './api';\nimport tokenService, { TokenService } from './token';\nimport rxjsOperators from '../rxjs-operators';\n\nexport class AuthService {\n  private user$: rxjs.Observable<Readonly<IUser>>;\n\n  constructor (private api: ApiService, private tokenService: TokenService) {\n    this.user$ = this.tokenService.getToken().pipe(\n      rxjsOperators.map(token => {\n        if (!token) {\n          return null;\n        }\n\n        const user = this.tokenService.decode<IUser>(token);\n        if (!user) {\n          return null\n        }\n\n        return user;\n      }),\n      rxjsOperators.catchError(() => {\n        return rxjs.of(null);\n      }),\n      rxjsOperators.shareReplay(1)\n    );\n  }\n\n  public login(email: string, password: string): rxjs.Observable<any> {\n    return this.api.post('/login', { email, password }).pipe(\n      rxjsOperators.switchMap(response => tokenService.setToken(response.token)),\n      rxjsOperators.tap(() => console.log('Login efetuado com sucesso!'))\n    );\n  }\n\n  public logout(): rxjs.Observable<void> {\n    return this.tokenService.clearToken();\n  }\n\n  public getUser(): rxjs.Observable<Readonly<IUser>> {\n    return this.user$;\n  }\n\n  public isAuthenticated(): rxjs.Observable<boolean> {\n    return this.tokenService.getToken().pipe(\n      rxjsOperators.map(token => !!token)\n    );\n  }\n}\n\nconst authService = new AuthService(apiService, tokenService);\nexport default authService;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAGA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAvBA;AAAA;AAAA;AAyBA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AA7BA;AAAA;AAAA;AAgCA;AACA;AAjCA;AAAA;AAAA;AAoCA;AACA;AArCA;AAAA;AAAA;AAwCA;AACA;AAAA;AAEA;AA3CA;AACA;AADA;AAAA;AA8CA;AACA;;;;A","sourceRoot":""}